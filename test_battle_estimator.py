from battle_estimator import probable_outcome, calculate_win_prob, generate_outcome
import pytest

# Check values match the Osborne figures
@pytest.mark.parametrize("i,j,k,value", [
    (1, 1, 1, 0.417),
    (1, 1, 0, 0.583),
    (1, 2, 1, 0.255),
    (1, 2, 0, 0.745),
    (2, 1, 1, 0.579),
    (2, 1, 0, 0.421),
    (2, 2, 2, 0.228),
    (2, 2, 1, 0.324),
    (2, 2, 0, 0.448),
    (3, 2, 2, 0.372),
    (3, 2, 1, 0.336),
    (3, 2, 0, 0.293),
])
def test_probable_outcome(i, j, k, value):
    assert round(probable_outcome(i, j, k), 3) == value


# Check values match the Osborne figures
@pytest.mark.parametrize("a, d, value", [
    (1, 1, 0.417),
    (1, 2, 0.106),
    (1, 3, 0.027),
    (1, 4, 0.007),
    (1, 5, 0.002),
    (1, 6, 0.000),
    (1, 7, 0.000),
    (1, 8, 0.000),
    (1, 9, 0.000),
    (1, 10, 0.000),
    (2, 1, 0.754),
    (2, 2, 0.363),
    (2, 3, 0.206),
    (2, 4, 0.091),
    (2, 5, 0.049),
    (2, 6, 0.021),
    (2, 7, 0.011),
    (2, 8, 0.005),
    (2, 9, 0.003),
    (2, 10, 0.001),
    (3, 1, 0.916),
    (3, 2, 0.656),
    (3, 3, 0.470),
    (3, 4, 0.315),
    (3, 5, 0.206),
    (3, 6, 0.134),
    (3, 7, 0.084),
    (3, 8, 0.054),
    (3, 9, 0.033),
    (3, 10, 0.021),
    (4, 1, 0.972),
    (4, 2, 0.785),
    (4, 3, 0.642),
    (4, 4, 0.477),
    (4, 5, 0.359),
    (4, 6, 0.253),
    (4, 7, 0.181),
    (4, 8, 0.123),
    (4, 9, 0.086),
    (4, 10, 0.057),
    (5, 1, 0.990),
    (5, 2, 0.890),
    (5, 3, 0.769),
    (5, 4, 0.638),
    (5, 5, 0.506),
    (5, 6, 0.397),
    (5, 7, 0.297),
    (5, 8, 0.224),
    (5, 9, 0.162),
    (5, 10, 0.118),
    (6, 1, 0.997),
    (6, 2, 0.934),
    (6, 3, 0.857),
    (6, 4, 0.745),
    (6, 5, 0.638),
    (6, 6, 0.521),
    (6, 7, 0.423),
    (6, 8, 0.329),
    (6, 9, 0.258),
    (6, 10, 0.193),
    (7, 1, 0.999),
    (7, 2, 0.967),
    (7, 3, 0.910),
    (7, 4, 0.834),
    (7, 5, 0.736),
    (7, 6, 0.640),
    (7, 7, 0.536),
    (7, 8, 0.446),
    (7, 9, 0.357),
    (7, 10, 0.287),
    (8, 1, 1.000),
    (8, 2, 0.980),
    (8, 3, 0.947),
    (8, 4, 0.888),
    (8, 5, 0.818),
    (8, 6, 0.730),
    (8, 7, 0.643),
    (8, 8, 0.547),
    (8, 9, 0.464),
    (8, 10, 0.380),
    (9, 1, 1.000),
    (9, 2, 0.990),
    (9, 3, 0.967),
    (9, 4, 0.930),
    (9, 5, 0.873),
    (9, 6, 0.808),
    (9, 7, 0.726),
    (9, 8, 0.646),
    (9, 9, 0.558),
    (9, 10, 0.480),
    (9, 1, 1.000),
    (10, 2, 0.994),
    (10, 3, 0.981),
    (10, 4, 0.954),
    (10, 5, 0.916),
    (10, 6, 0.861),
    (10, 7, 0.800),
    (10, 8, 0.724),
    (10, 9, 0.650),
    (10, 10, 0.568),
])
def test_calculate_win_prob(a, d, value):
    assert round(calculate_win_prob(a, d), 3) == value


def test_generate_outcome():
    results = generate_outcome(5, 3, repeats=5)
    assert len(results) == 5
    for r in results:
        # there should only be one loser
        assert bool(r[0] == 0) ^ bool(r[1] == 0)
        assert r[0] <= 5
        assert r[1] <= 3
